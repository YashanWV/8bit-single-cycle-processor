$date
	Tue May 30 21:50:08 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 32 ! PC [31:0] $end
$var wire 32 " INSTRUCTION [31:0] $end
$var reg 1 # CLK $end
$var reg 1 $ RESET $end
$scope module mycpu $end
$var wire 1 # CLK $end
$var wire 32 % INSTRUCTION [31:0] $end
$var wire 1 $ RESET $end
$var wire 1 & ZERO $end
$var wire 3 ' WRITEREG [2:0] $end
$var wire 8 ( TwosCompOperand [7:0] $end
$var wire 8 ) TwosCompMuxOut [7:0] $end
$var wire 32 * TARGET_ADDR [31:0] $end
$var wire 8 + REGOUT2 [7:0] $end
$var wire 8 , REGOUT1 [7:0] $end
$var wire 3 - READREG2 [2:0] $end
$var wire 3 . READREG1 [2:0] $end
$var wire 32 / PC_new [31:0] $end
$var wire 32 0 PC_inc [31:0] $end
$var wire 8 1 OPERAND2 [7:0] $end
$var wire 8 2 OFFSET [7:0] $end
$var wire 8 3 IMMEDIATE [7:0] $end
$var wire 1 4 FlowSelect $end
$var wire 8 5 ALURESULT [7:0] $end
$var reg 3 6 ALUOP [2:0] $end
$var reg 1 7 BRANCH $end
$var reg 1 8 ImmOrRegistered $end
$var reg 1 9 JUMP $end
$var reg 8 : OPCODE [7:0] $end
$var reg 32 ; PC [31:0] $end
$var reg 1 < PositiveOrNegative $end
$var reg 1 = WRITEENABLE $end
$scope module FlowControlMux $end
$var wire 1 4 SELECT $end
$var wire 32 > IN2 [31:0] $end
$var wire 32 ? IN1 [31:0] $end
$var reg 32 @ OUT [31:0] $end
$upscope $end
$scope module ImmediateMux $end
$var wire 8 A IN2 [7:0] $end
$var wire 1 8 SELECT $end
$var wire 8 B IN1 [7:0] $end
$var reg 8 C OUT [7:0] $end
$upscope $end
$scope module MyAlu $end
$var wire 8 D DATA2 [7:0] $end
$var wire 3 E SELECT [2:0] $end
$var wire 1 & ZERO $end
$var wire 8 F Or_Out [7:0] $end
$var wire 8 G Forward_Out [7:0] $end
$var wire 8 H DATA1 [7:0] $end
$var wire 8 I And_Out [7:0] $end
$var wire 8 J Add_Out [7:0] $end
$var reg 8 K RESULT [7:0] $end
$scope module add1 $end
$var wire 8 L DATA2 [7:0] $end
$var wire 8 M RESULT [7:0] $end
$var wire 8 N DATA1 [7:0] $end
$upscope $end
$scope module and1 $end
$var wire 8 O DATA2 [7:0] $end
$var wire 8 P RESULT [7:0] $end
$var wire 8 Q DATA1 [7:0] $end
$upscope $end
$scope module forward1 $end
$var wire 8 R DATA2 [7:0] $end
$var wire 8 S RESULT [7:0] $end
$upscope $end
$scope module or1 $end
$var wire 8 T DATA2 [7:0] $end
$var wire 8 U RESULT [7:0] $end
$var wire 8 V DATA1 [7:0] $end
$upscope $end
$upscope $end
$scope module MyControlFlow $end
$var wire 1 7 BRANCH $end
$var wire 1 & EQUEL $end
$var wire 1 4 FLOW_SELECT $end
$var wire 1 9 JUMP $end
$upscope $end
$scope module MyPcAdder $end
$var wire 32 W PC [31:0] $end
$var wire 32 X IncrementedPC [31:0] $end
$upscope $end
$scope module MyRegFile $end
$var wire 1 # CLK $end
$var wire 8 Y IN [7:0] $end
$var wire 3 Z INADDRESS [2:0] $end
$var wire 8 [ OUT1 [7:0] $end
$var wire 3 \ OUT1ADDRESS [2:0] $end
$var wire 8 ] OUT2 [7:0] $end
$var wire 3 ^ OUT2ADDRESS [2:0] $end
$var wire 1 $ RESET $end
$var wire 1 = WRITE $end
$var integer 32 _ i [31:0] $end
$upscope $end
$scope module MyTargetAddress $end
$var wire 8 ` OFFSET [7:0] $end
$var wire 32 a PC [31:0] $end
$var wire 22 b extend_bits [21:0] $end
$var wire 32 c TARGET_ADDR [31:0] $end
$upscope $end
$scope module MyTwosComp $end
$var wire 8 d OPERAND [7:0] $end
$var wire 8 e RESULT [7:0] $end
$upscope $end
$scope module TwosCompMux $end
$var wire 8 f IN1 [7:0] $end
$var wire 8 g IN2 [7:0] $end
$var wire 1 < SELECT $end
$var reg 8 h OUT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
x=
x<
bx ;
bx :
x9
x8
x7
bx 6
bx 5
x4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
x&
bx %
1$
0#
bx "
bx !
$end
#4
1#
#5
b1000 _
b0 !
b0 ;
b0 W
0$
#6
b100 0
b100 ?
b100 X
b100 a
#7
b101 1
b101 C
b101 D
b101 L
b101 O
b101 R
b101 T
b101 -
b101 ^
b0 .
b0 \
b0 '
b0 Z
b0 b
b0 :
b101 3
b101 A
b0 2
b0 `
b101 "
b101 %
#8
0&
b100 /
b100 @
04
b101 5
b101 K
b101 Y
b0x0x I
b0x0x P
bx1x1 F
bx1x1 U
b101 G
b101 S
1=
07
09
b0 6
b0 E
18
0<
0#
#9
b0 )
b0 B
b0 h
b0 +
b0 ]
b0 d
b0 f
b0 ,
b0 H
b0 N
b0 Q
b0 V
b0 [
b100 *
b100 >
b100 c
#10
b0 (
b0 e
b0 g
b101 F
b101 U
b0 I
b0 P
#11
b101 J
b101 M
#12
1#
#13
b100 !
b100 ;
b100 W
#14
b1000 /
b1000 @
b1000 0
b1000 ?
b1000 X
b1000 a
#15
b1001 1
b1001 C
b1001 D
b1001 L
b1001 O
b1001 R
b1001 T
b1 -
b1 ^
b1 '
b1 Z
b1001 3
b1001 A
b1 2
b1 `
b10000000000001001 "
b10000000000001001 %
b101 ,
b101 H
b101 N
b101 Q
b101 V
b101 [
#16
b1001 5
b1001 K
b1001 Y
b1101 F
b1101 U
b1001 G
b1001 S
b1 I
b1 P
0#
#17
b1100 *
b1100 >
b1100 c
b1110 J
b1110 M
#20
1#
#21
b1000 !
b1000 ;
b1000 W
#22
b1100 /
b1100 @
b1100 0
b1100 ?
b1100 X
b1100 a
#23
b1 1
b1 C
b1 D
b1 L
b1 O
b1 R
b1 T
b10 '
b10 Z
b1001 )
b1001 B
b1001 h
b1 :
b1 3
b1 A
b10 2
b10 `
b1001 +
b1001 ]
b1001 d
b1001 f
b1000000100000000000000001 "
b1000000100000000000000001 %
#24
b1 5
b1 K
b1 Y
b1001 1
b1001 C
b1001 D
b1001 L
b1001 O
b1001 R
b1001 T
b101 F
b101 U
b1 G
b1 S
b11110111 (
b11110111 e
b11110111 g
08
0#
#25
b1001 5
b1001 K
b1001 Y
b1101 F
b1101 U
b1001 G
b1001 S
b10100 *
b10100 >
b10100 c
#28
1#
#29
b1100 !
b1100 ;
b1100 W
#30
b10000 /
b10000 @
b10000 0
b10000 ?
b10000 X
b10000 a
#31
b0 -
b0 ^
b10 .
b10 \
b11 '
b11 Z
b10 :
b0 3
b0 A
b11 2
b11 `
b10000000110000001000000000 "
b10000000110000001000000000 %
#32
b1110 5
b1110 K
b1110 Y
b1 6
b1 E
0#
#33
b101 1
b101 C
b101 D
b101 L
b101 O
b101 R
b101 T
b101 )
b101 B
b101 h
b101 +
b101 ]
b101 d
b101 f
b1001 ,
b1001 H
b1001 N
b1001 Q
b1001 V
b1001 [
b11100 *
b11100 >
b11100 c
#34
b101 G
b101 S
b11111011 (
b11111011 e
b11111011 g
#36
1#
#37
b10000 !
b10000 ;
b10000 W
#38
b10100 /
b10100 @
b10100 0
b10100 ?
b10100 X
b10100 a
#39
b110 -
b110 ^
b0 .
b0 \
b101 '
b101 Z
b0 :
b1110 3
b1110 A
b101 2
b101 `
b1010000000000001110 "
b1010000000000001110 %
#40
b101 5
b101 K
b101 Y
b1110 1
b1110 C
b1110 D
b1110 L
b1110 O
b1110 R
b1110 T
b0 6
b0 E
18
0#
#41
b1110 5
b1110 K
b1110 Y
b0 )
b0 B
b0 h
b1000 I
b1000 P
b1111 F
b1111 U
b1110 G
b1110 S
b0 +
b0 ]
b0 d
b0 f
b101 ,
b101 H
b101 N
b101 Q
b101 V
b101 [
b101000 *
b101000 >
b101000 c
#42
b0 (
b0 e
b0 g
b100 I
b100 P
#43
b10011 J
b10011 M
#44
1#
#45
b10100 !
b10100 ;
b10100 W
#46
b11000 /
b11000 @
b11000 0
b11000 ?
b11000 X
b11000 a
#47
b101 1
b101 C
b101 D
b101 L
b101 O
b101 R
b101 T
b101 -
b101 ^
b11 .
b11 \
b1 '
b1 Z
b111 :
b101 3
b101 A
b1 2
b1 `
b111000000010000001100000101 "
b111000000010000001100000101 %
#48
b10011 5
b10011 K
b10011 Y
b0 1
b0 C
b0 D
b0 L
b0 O
b0 R
b0 T
b101 I
b101 P
b101 F
b101 U
b101 G
b101 S
0=
17
b1 6
b1 E
08
1<
0#
#49
b0 I
b0 P
b0 G
b0 S
b1110 +
b1110 ]
b1110 d
b1110 f
b1110 ,
b1110 H
b1110 N
b1110 Q
b1110 V
b1110 [
b11100 *
b11100 >
b11100 c
#50
b11110010 1
b11110010 C
b11110010 D
b11110010 L
b11110010 O
b11110010 R
b11110010 T
b11110010 )
b11110010 B
b11110010 h
b11110010 (
b11110010 e
b11110010 g
b1110 F
b1110 U
#51
b10 I
b10 P
b11111110 F
b11111110 U
b11110010 G
b11110010 S
#52
b11100 /
b11100 @
14
1&
b0 5
b0 K
b0 Y
b0 J
b0 M
1#
#53
b11100 !
b11100 ;
b11100 W
#54
b100000 0
b100000 ?
b100000 X
b100000 a
#55
b0 -
b0 ^
b0 .
b0 \
b11 '
b11 Z
b110 :
b0 3
b0 A
b11 2
b11 `
b110000000110000000000000000 "
b110000000110000000000000000 %
#56
07
19
0#
#57
b101100 /
b101100 @
b101 +
b101 ]
b101 d
b101 f
b101 ,
b101 H
b101 N
b101 Q
b101 V
b101 [
b101100 *
b101100 >
b101100 c
#58
b11111011 1
b11111011 C
b11111011 D
b11111011 L
b11111011 O
b11111011 R
b11111011 T
b11111011 )
b11111011 B
b11111011 h
b11111011 (
b11111011 e
b11111011 g
b11110111 F
b11110111 U
b0 I
b0 P
#59
b1 I
b1 P
b11111111 F
b11111111 U
b11111011 G
b11111011 S
#60
1#
#61
b101100 !
b101100 ;
b101100 W
#62
b110000 0
b110000 ?
b110000 X
b110000 a
#63
bx -
bx ^
bx .
bx \
bx '
bx Z
bx b
bx :
bx 3
bx A
bx 2
bx `
bx "
bx %
#64
x4
bx 1
bx C
bx D
bx L
bx O
bx R
bx T
x=
x7
x9
bx 6
bx E
x8
x<
0#
#65
bx /
bx @
b0x0x I
b0x0x P
bx1x1 F
bx1x1 U
bx G
bx S
bx +
bx ]
bx d
bx f
bx ,
bx H
bx N
bx Q
bx V
bx [
bx *
bx >
bx c
#66
bx )
bx B
bx h
bx (
bx e
bx g
bx F
bx U
bx I
bx P
bx J
bx M
#68
1#
#69
bx !
bx ;
bx W
#70
bx 0
bx ?
bx X
bx a
#72
0#
#76
1#
#80
0#
#84
1#
#88
0#
#92
1#
#96
0#
#100
1#
#104
0#
#108
1#
#112
0#
#116
1#
#120
0#
#124
1#
#128
0#
#132
1#
#136
0#
#140
1#
#144
0#
#148
1#
#152
0#
#156
1#
#160
0#
#164
1#
#168
0#
#172
1#
#176
0#
#180
1#
#184
0#
#188
1#
#192
0#
#196
1#
#200
0#
#204
1#
#208
0#
#212
1#
#216
0#
#220
1#
#224
0#
#228
1#
#232
0#
#236
1#
#240
0#
#244
1#
#248
0#
#252
1#
#256
0#
#260
1#
#264
0#
#268
1#
#272
0#
#276
1#
#280
0#
#284
1#
#288
0#
#292
1#
#296
0#
#300
1#
#304
0#
#308
1#
#312
0#
#316
1#
#320
0#
#324
1#
#328
0#
#332
1#
#336
0#
#340
1#
#344
0#
#348
1#
#352
0#
#356
1#
#360
0#
#364
1#
#368
0#
#372
1#
#376
0#
#380
1#
#384
0#
#388
1#
#392
0#
#396
1#
#400
0#
#404
1#
#408
0#
#412
1#
#416
0#
#420
1#
#424
0#
#428
1#
#432
0#
#436
1#
#440
0#
#444
1#
#448
0#
#452
1#
#456
0#
#460
1#
#464
0#
#468
1#
#472
0#
#476
1#
#480
0#
#484
1#
#488
0#
#492
1#
#496
0#
#500
1#
#504
0#
#505
