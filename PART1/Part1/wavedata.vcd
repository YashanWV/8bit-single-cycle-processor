$date
	Tue May 23 18:45:59 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$scope module ALU1 $end
$var wire 8 ! DATA1 [7:0] $end
$var wire 8 " DATA2 [7:0] $end
$var wire 3 # SELECT [2:0] $end
$var wire 8 $ Or_Out [7:0] $end
$var wire 8 % Forward_Out [7:0] $end
$var wire 8 & And_Out [7:0] $end
$var wire 8 ' Add_Out [7:0] $end
$var reg 8 ( RESULT [7:0] $end
$scope module add1 $end
$var wire 8 ) DATA1 [7:0] $end
$var wire 8 * DATA2 [7:0] $end
$var wire 8 + RESULT [7:0] $end
$upscope $end
$scope module and1 $end
$var wire 8 , DATA1 [7:0] $end
$var wire 8 - DATA2 [7:0] $end
$var wire 8 . RESULT [7:0] $end
$upscope $end
$scope module forward1 $end
$var wire 8 / DATA2 [7:0] $end
$var wire 8 0 RESULT [7:0] $end
$upscope $end
$scope module or1 $end
$var wire 8 1 DATA1 [7:0] $end
$var wire 8 2 DATA2 [7:0] $end
$var wire 8 3 RESULT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 3
b0 2
b0 1
bx 0
b0 /
bx .
b0 -
b0 ,
bx +
b0 *
b0 )
bx (
bx '
bx &
bx %
bx $
bx #
b0 "
b0 !
$end
#1
b0 $
b0 3
b0 &
b0 .
b0 %
b0 0
#2
b0 '
b0 +
#5
b0 (
b0 #
b10100 "
b10100 *
b10100 -
b10100 /
b10100 2
b1010 !
b1010 )
b1010 ,
b1010 1
#6
b10100 (
b11110 $
b11110 3
b10100 %
b10100 0
#7
b11110 '
b11110 +
#10
b11110 (
b1 #
b1111 "
b1111 *
b1111 -
b1111 /
b1111 2
#11
b1010 &
b1010 .
b1111 $
b1111 3
b1111 %
b1111 0
#12
b11001 (
b11001 '
b11001 +
#15
b1010 (
b10 #
b1110 "
b1110 *
b1110 -
b1110 /
b1110 2
b111 !
b111 )
b111 ,
b111 1
#16
b110 (
b110 &
b110 .
b1110 %
b1110 0
#17
b10101 '
b10101 +
#20
b1111 (
b11 #
b11110 "
b11110 *
b11110 -
b11110 /
b11110 2
#21
b11111 (
b11111 $
b11111 3
b11110 %
b11110 0
#22
b100101 '
b100101 +
#30
