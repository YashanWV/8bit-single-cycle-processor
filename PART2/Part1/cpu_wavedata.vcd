$date
	Tue Jun 13 21:42:51 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 8 ! WRITEDATA [7:0] $end
$var wire 1 " WRITE $end
$var wire 8 # READDATA [7:0] $end
$var wire 1 $ READ $end
$var wire 32 % PC [31:0] $end
$var wire 32 & INSTRUCTION [31:0] $end
$var wire 1 ' BUSYWAIT $end
$var wire 8 ( ADDRESS [7:0] $end
$var reg 1 ) CLK $end
$var reg 1 * RESET $end
$scope module my_data_memory $end
$var wire 1 ) clock $end
$var wire 1 * reset $end
$var wire 8 + writedata [7:0] $end
$var wire 1 " write $end
$var wire 1 $ read $end
$var wire 8 , address [7:0] $end
$var reg 1 ' busywait $end
$var reg 1 - readaccess $end
$var reg 8 . readdata [7:0] $end
$var reg 1 / writeaccess $end
$var integer 32 0 i [31:0] $end
$upscope $end
$scope module mycpu $end
$var wire 8 1 ADDRESS [7:0] $end
$var wire 1 ' BUSYWAIT $end
$var wire 1 ) CLK $end
$var wire 32 2 INSTRUCTION [31:0] $end
$var wire 8 3 READDATA [7:0] $end
$var wire 1 * RESET $end
$var wire 8 4 WRITEDATA [7:0] $end
$var wire 1 5 ZERO $end
$var wire 3 6 WRITEREG [2:0] $end
$var wire 8 7 TwosCompOperand [7:0] $end
$var wire 8 8 TwosCompMuxOut [7:0] $end
$var wire 32 9 TARGET_ADDR [31:0] $end
$var wire 8 : RegWrite [7:0] $end
$var wire 8 ; REGOUT2 [7:0] $end
$var wire 8 < REGOUT1 [7:0] $end
$var wire 3 = READREG2 [2:0] $end
$var wire 3 > READREG1 [2:0] $end
$var wire 32 ? PC_new [31:0] $end
$var wire 32 @ PC_inc [31:0] $end
$var wire 8 A OPERAND2 [7:0] $end
$var wire 8 B OFFSET [7:0] $end
$var wire 8 C IMMEDIATE [7:0] $end
$var wire 1 D FlowSelect $end
$var wire 8 E ALURESULT [7:0] $end
$var reg 3 F ALUOP [2:0] $end
$var reg 1 G BRANCH $end
$var reg 1 H ImmOrRegistered $end
$var reg 1 I JUMP $end
$var reg 8 J OPCODE [7:0] $end
$var reg 32 K PC [31:0] $end
$var reg 1 L PositiveOrNegative $end
$var reg 1 $ READ $end
$var reg 1 M RegWriteSelect $end
$var reg 1 " WRITE $end
$var reg 1 N WRITEENABLE $end
$scope module AluOrDataMemoryMux $end
$var wire 8 O IN2 [7:0] $end
$var wire 1 M SELECT $end
$var wire 8 P IN1 [7:0] $end
$var reg 8 Q OUT [7:0] $end
$upscope $end
$scope module FlowControlMux $end
$var wire 1 D SELECT $end
$var wire 32 R IN2 [31:0] $end
$var wire 32 S IN1 [31:0] $end
$var reg 32 T OUT [31:0] $end
$upscope $end
$scope module ImmediateMux $end
$var wire 8 U IN2 [7:0] $end
$var wire 1 H SELECT $end
$var wire 8 V IN1 [7:0] $end
$var reg 8 W OUT [7:0] $end
$upscope $end
$scope module MyAlu $end
$var wire 8 X DATA2 [7:0] $end
$var wire 3 Y SELECT [2:0] $end
$var wire 1 5 ZERO $end
$var wire 8 Z Or_Out [7:0] $end
$var wire 8 [ Forward_Out [7:0] $end
$var wire 8 \ DATA1 [7:0] $end
$var wire 8 ] And_Out [7:0] $end
$var wire 8 ^ Add_Out [7:0] $end
$var reg 8 _ RESULT [7:0] $end
$scope module add1 $end
$var wire 8 ` DATA2 [7:0] $end
$var wire 8 a RESULT [7:0] $end
$var wire 8 b DATA1 [7:0] $end
$upscope $end
$scope module and1 $end
$var wire 8 c DATA2 [7:0] $end
$var wire 8 d RESULT [7:0] $end
$var wire 8 e DATA1 [7:0] $end
$upscope $end
$scope module forward1 $end
$var wire 8 f DATA2 [7:0] $end
$var wire 8 g RESULT [7:0] $end
$upscope $end
$scope module or1 $end
$var wire 8 h DATA2 [7:0] $end
$var wire 8 i RESULT [7:0] $end
$var wire 8 j DATA1 [7:0] $end
$upscope $end
$upscope $end
$scope module MyControlFlow $end
$var wire 1 G BRANCH $end
$var wire 1 D FLOW_SELECT $end
$var wire 1 I JUMP $end
$var wire 1 5 ZERO $end
$upscope $end
$scope module MyPcAdder $end
$var wire 32 k PC [31:0] $end
$var wire 32 l IncrementedPC [31:0] $end
$upscope $end
$scope module MyRegFile $end
$var wire 1 ) CLK $end
$var wire 8 m IN [7:0] $end
$var wire 3 n INADDRESS [2:0] $end
$var wire 8 o OUT1 [7:0] $end
$var wire 3 p OUT1ADDRESS [2:0] $end
$var wire 8 q OUT2 [7:0] $end
$var wire 3 r OUT2ADDRESS [2:0] $end
$var wire 1 * RESET $end
$var wire 1 s WRITE $end
$var integer 32 t i [31:0] $end
$upscope $end
$scope module MyTargetAddress $end
$var wire 8 u OFFSET [7:0] $end
$var wire 32 v PC [31:0] $end
$var wire 22 w extend_bits [21:0] $end
$var wire 32 x TARGET_ADDR [31:0] $end
$upscope $end
$scope module MyTwosComp $end
$var wire 8 y OPERAND [7:0] $end
$var wire 8 z RESULT [7:0] $end
$upscope $end
$scope module TwosCompMux $end
$var wire 8 { IN1 [7:0] $end
$var wire 8 | IN2 [7:0] $end
$var wire 1 L SELECT $end
$var reg 8 } OUT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
xs
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
xN
xM
xL
bx K
bx J
xI
xH
xG
bx F
bx E
xD
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
x5
bx 4
bx 3
bx 2
bx 1
b100000000 0
0/
bx .
0-
bx ,
bx +
1*
0)
bx (
0'
bx &
bx %
0$
bx #
0"
bx !
$end
#4
1)
#5
b1000 t
b0 %
b0 K
b0 k
0*
#6
b100 @
b100 S
b100 l
b100 v
#7
b101 A
b101 W
b101 X
b101 `
b101 c
b101 f
b101 h
b101 =
b101 r
b0 >
b0 p
b100 6
b100 n
b0 w
b0 J
b101 C
b101 U
b100 B
b100 u
b1000000000000000101 &
b1000000000000000101 2
#8
05
b100 ?
b100 T
0D
b101 :
b101 Q
b101 m
1s
b101 (
b101 ,
b101 1
b101 E
b101 P
b101 _
b0x0x ]
b0x0x d
bx1x1 Z
bx1x1 i
b101 [
b101 g
0M
1N
0G
0I
b0 F
b0 Y
1H
0L
0)
#9
b0 8
b0 V
b0 }
b0 ;
b0 q
b0 y
b0 {
b0 !
b0 +
b0 4
b0 <
b0 \
b0 b
b0 e
b0 j
b0 o
b10100 9
b10100 R
b10100 x
#10
b0 7
b0 z
b0 |
b101 Z
b101 i
b0 ]
b0 d
#11
b101 ^
b101 a
#12
1)
#13
b100 %
b100 K
b100 k
#14
b1000 ?
b1000 T
b1000 @
b1000 S
b1000 l
b1000 v
#15
b11 A
b11 W
b11 X
b11 `
b11 c
b11 f
b11 h
b11 =
b11 r
b101 6
b101 n
b11 C
b11 U
b101 B
b101 u
b1010000000000000011 &
b1010000000000000011 2
#16
b11 :
b11 Q
b11 m
b11 (
b11 ,
b11 1
b11 E
b11 P
b11 _
b11 Z
b11 i
b11 [
b11 g
0)
#17
b11 ^
b11 a
b11100 9
b11100 R
b11100 x
#20
1)
#21
b1000 %
b1000 K
b1000 k
#22
b1100 ?
b1100 T
b1100 @
b1100 S
b1100 l
b1100 v
#23
b101 A
b101 W
b101 X
b101 `
b101 c
b101 f
b101 h
b101 =
b101 r
b100 >
b100 p
b0 6
b0 n
b1010 J
b101 C
b101 U
b0 B
b0 u
b1010000000000000010000000101 &
b1010000000000000010000000101 2
#24
b101 :
b101 Q
b101 m
b101 (
b101 ,
b101 1
b101 E
b101 P
b101 _
1/
1'
0s
b0 A
b0 W
b0 X
b0 `
b0 c
b0 f
b0 h
b101 Z
b101 i
b101 [
b101 g
1"
0N
0H
0)
#25
15
b0 :
b0 Q
b0 m
b11 A
b11 W
b11 X
b11 `
b11 c
b11 f
b11 h
b0 (
b0 ,
b0 1
b0 E
b0 P
b0 _
b11 8
b11 V
b11 }
b0 Z
b0 i
b0 [
b0 g
b11 ;
b11 q
b11 y
b11 {
b101 !
b101 +
b101 4
b101 <
b101 \
b101 b
b101 e
b101 j
b101 o
b1100 9
b1100 R
b1100 x
#26
05
b11 :
b11 Q
b11 m
b11 (
b11 ,
b11 1
b11 E
b11 P
b11 _
b1 ]
b1 d
b11 [
b11 g
b11111101 7
b11111101 z
b11111101 |
b111 Z
b111 i
#27
b1000 ^
b1000 a
#28
1)
#32
0)
#36
1)
#40
0)
#44
1)
#48
0)
#52
1)
#56
0)
#60
1)
#64
0)
#68
0"
1)
0/
0'
#69
b1100 %
b1100 K
b1100 k
#70
b10000 ?
b10000 T
b10000 @
b10000 S
b10000 l
b10000 v
#71
b110 =
b110 r
b101 >
b101 p
b1011 J
b110 C
b110 U
b1011000000000000010100000110 &
b1011000000000000010100000110 2
#72
1/
1'
b110 A
b110 W
b110 X
b110 `
b110 c
b110 f
b110 h
1"
1H
b10000 9
b10000 R
b10000 x
0)
#73
b110 :
b110 Q
b110 m
b110 (
b110 ,
b110 1
b110 E
b110 P
b110 _
b0 8
b0 V
b0 }
b100 ]
b100 d
b110 [
b110 g
b0 ;
b0 q
b0 y
b0 {
b11 !
b11 +
b11 4
b11 <
b11 \
b11 b
b11 e
b11 j
b11 o
#74
b0 7
b0 z
b0 |
b10 ]
b10 d
#75
b1001 ^
b1001 a
#76
1)
#80
0)
#84
1)
#88
0)
#92
1)
#96
0)
#100
1)
#104
0)
#108
1)
#112
0)
#116
0"
1)
0/
0'
#117
b10000 %
b10000 K
b10000 k
#118
b10100 ?
b10100 T
b10100 @
b10100 S
b10100 l
b10100 v
#119
b101 A
b101 W
b101 X
b101 `
b101 c
b101 f
b101 h
b101 =
b101 r
b0 >
b0 p
b110 6
b110 n
b1000 J
b101 C
b101 U
b110 B
b110 u
b1000000001100000000000000101 &
b1000000001100000000000000101 2
#120
b101 (
b101 ,
b101 1
b101 E
b101 P
b101 _
bx :
bx Q
bx m
1-
1'
0s
b0 A
b0 W
b0 X
b0 `
b0 c
b0 f
b0 h
b1 ]
b1 d
b101 [
b101 g
1M
1$
1N
0H
0)
#121
15
b11 A
b11 W
b11 X
b11 `
b11 c
b11 f
b11 h
b0 (
b0 ,
b0 1
b0 E
b0 P
b0 _
b11 8
b11 V
b11 }
b0 ]
b0 d
b11 Z
b11 i
b0 [
b0 g
b11 ;
b11 q
b11 y
b11 {
b0 !
b0 +
b0 4
b0 <
b0 \
b0 b
b0 e
b0 j
b0 o
b101100 9
b101100 R
b101100 x
#122
05
b11 (
b11 ,
b11 1
b11 E
b11 P
b11 _
b11 [
b11 g
b11111101 7
b11111101 z
b11111101 |
#123
b11 ^
b11 a
#124
1)
#128
0)
#132
1)
#136
0)
#140
1)
#144
0)
#148
1)
#152
0)
#156
1)
#160
0)
#164
0$
1s
b101 :
b101 Q
b101 m
1)
0-
0'
b101 #
b101 .
b101 3
b101 O
#165
b10100 %
b10100 K
b10100 k
#166
b11000 ?
b11000 T
b11000 @
b11000 S
b11000 l
b11000 v
#167
b110 =
b110 r
b111 6
b111 n
b1001 J
b110 C
b110 U
b111 B
b111 u
b1001000001110000000000000110 &
b1001000001110000000000000110 2
#168
0s
1-
1'
b110 A
b110 W
b110 X
b110 `
b110 c
b110 f
b110 h
1$
1H
0)
#169
b110 (
b110 ,
b110 1
b110 E
b110 P
b110 _
b101 8
b101 V
b101 }
b110 Z
b110 i
b110 [
b110 g
b101 ;
b101 q
b101 y
b101 {
b110100 9
b110100 R
b110100 x
#170
b11111011 7
b11111011 z
b11111011 |
b110 ^
b110 a
#172
1)
#176
0)
#180
1)
#184
0)
#188
1)
#192
0)
#196
1)
#200
0)
#204
1)
#208
0)
#212
0$
1s
b11 :
b11 Q
b11 m
1)
0-
0'
b11 #
b11 .
b11 3
b11 O
#213
b11000 %
b11000 K
b11000 k
#214
b11100 ?
b11100 T
b11100 @
b11100 S
b11100 l
b11100 v
#215
bx A
bx W
bx X
bx `
bx c
bx f
bx h
bx =
bx r
bx >
bx p
bx 6
bx n
bx w
bx J
bx C
bx U
bx B
bx u
bx &
bx 2
#216
b110100 ?
b110100 T
x/
x-
x'
xs
xD
b11111011 8
b11111011 V
b11111011 }
bx Z
bx i
bx [
bx g
xM
x"
x$
xN
xG
xI
bx F
bx Y
xH
xL
0)
#217
bx ?
bx T
bx ^
bx a
bx ;
bx q
bx y
bx {
bx !
bx +
bx 4
bx <
bx \
bx b
bx e
bx j
bx o
bx 9
bx R
bx x
#218
bx 8
bx V
bx }
bx 7
bx z
bx |
bx ]
bx d
#220
1)
#221
bx %
bx K
bx k
#222
bx @
bx S
bx l
bx v
#224
0)
#228
1)
#232
0)
#236
1)
#240
0)
#244
1)
#248
0)
#252
1)
#256
0)
#260
1)
#264
0)
#268
1)
#272
0)
#276
1)
#280
0)
#284
1)
#288
0)
#292
1)
#296
0)
#300
1)
#304
0)
#308
1)
#312
0)
#316
1)
#320
0)
#324
1)
#328
0)
#332
1)
#336
0)
#340
1)
#344
0)
#348
1)
#352
0)
#356
1)
#360
0)
#364
1)
#368
0)
#372
1)
#376
0)
#380
1)
#384
0)
#388
1)
#392
0)
#396
1)
#400
0)
#404
1)
#408
0)
#412
1)
#416
0)
#420
1)
#424
0)
#428
1)
#432
0)
#436
1)
#440
0)
#444
1)
#448
0)
#452
1)
#456
0)
#460
1)
#464
0)
#468
1)
#472
0)
#476
1)
#480
0)
#484
1)
#488
0)
#492
1)
#496
0)
#500
1)
#504
0)
#505
